#!/usr/bin/env python3

import sys
import os
import subprocess
import logging
import tempfile
import xml.etree.ElementTree as ET
from collections import defaultdict
import copy
import shutil


class SVGFigExporter:
    def __init__(self, filename):
        self.filename = filename
        self.xml = ET.parse(filename)
        self.document = self.xml.getroot()
        self.namespaces = {
            'sodipodi': "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
            "inkscape": "http://www.inkscape.org/namespaces/inkscape",
            "svg": "http://www.w3.org/2000/svg",
        }
    
    def get_layers(self):
        svg_layers = self.document.findall('svg:g[@inkscape:groupmode="layer"]',
                                           self.namespaces)
        layers = []
        for layer in svg_layers:
            label_attrib_name = "{%s}label" % self.namespaces['inkscape']
            if label_attrib_name not in layer.attrib:
                continue

            layer_id = layer.attrib["id"]
            layer_label = layer.attrib[label_attrib_name]

            layers.append((layer_id, layer_label))
        return layers

    def calculate_views(self):
        layers = self.get_layers()
        max_layer = 0
        page_list = defaultdict(lambda : defaultdict(list))
        ranges = []
        max_page = 1
        for (g_id, desc) in layers:
            pages = set()
            file_out = None
            if "<" in desc and ">" in desc:
                file_out = desc[:desc.index("<")].strip()
                desc = desc[desc.index("<")+1:desc.rindex(">")]
            if not desc:
                continue
            desc = ''.join([c for c in desc if c.isdigit() or c in (',','-') ])
            for elem in desc.split(","):
                if '-' in elem:
                    from_, till_ = elem.split("-")
                    from_, till_ = from_.strip(), till_.strip()
                    if not from_: from_ = "1"
                    if not till_: till_ = "-1"
                    ranges.append([file_out, g_id, int(from_ or "1"), int(till_ or "-1")])
                elif not elem:
                    ranges.append([file_out,g_id, 0, 0])
                else:
                    ranges.append([file_out,g_id, int(elem.strip()), int(elem.strip())])
                max_page = max(max_page, *ranges[-1][2:])
        if not layers:
            ranges.append([None,"layer1",1,1])

        for file_out, g_id, from_, till_ in ranges:
            if till_ == -1: till_ = max_page
            for p in range(from_, till_+1):
                page_list[file_out][p].append(g_id)
        print(page_list)
        return page_list

    def export_layer(self, layers):
        """
        """
        temp = tempfile.NamedTemporaryFile(suffix=".svg")
        doc = copy.deepcopy(self.xml)
        for layer in doc.findall('svg:g[@inkscape:groupmode="layer"]',
                                 self.namespaces):
            layer.attrib['style'] = 'display:none'
            id = layer.attrib["id"]
            if id in layers:
                layer.attrib['style'] = 'display:inline'

        doc.write(temp.name)
        temp.flush()
        return temp


    def export_to_pdf(self, svg_path, output_path):
        command = "inkscape %s -A %s" % (svg_path, output_path)
        print(command)
        p = subprocess.Popen(command, shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        p.wait()

    def export(self,outfn=None):

        file_page_list = self.calculate_views()
        actions =""
        pdfs = defaultdict(list)
        files = []
        for fn in sorted(file_page_list):
            page_list = file_page_list[fn]
            for page in sorted(page_list):
                element_list = page_list[page]

                fd = self.export_layer(element_list)
                pdf = tempfile.NamedTemporaryFile(suffix=".pdf")

                files += [fd,pdf] # To keep files open

                actions += f"file-open:{fd.name};export-filename:{pdf.name};export-type:pdf;"
                actions += "export-overwrite;export-do;"

                pdfs[fn].append(pdf.name)

        logging.info("Run inkscape on %s", self.filename)
        subprocess.check_call([shutil.which("inkscape"), "--batch-process",
                               "--actions", actions],
                              env={"DISPLAY":""})

        for fn in pdfs:
            pdftk = ["pdftk"]
            for pdf in pdfs[fn]:
                if os.path.exists(pdf) and os.stat(pdf).st_size > 0:
                    pdftk.append(pdf)

            if not fn and outfn:
                fn = outfn
            elif not fn:
                base, _ = os.path.splitext(self.filename)
                fn = base + ".pdf"
            if not fn.endswith(".pdf"):
                fn += ".pdf"
            pdftk += ["cat", "output", fn]
            subprocess.check_call(pdftk)
            print("Produced: ", fn)


def main():
    f = SVGFigExporter(sys.argv[1])
    if len(sys.argv) > 2:
        f.export(sys.argv[2])
    else:
        f.export()


if __name__ == "__main__":
    main()
